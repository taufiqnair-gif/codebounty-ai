import type { ethers } from "ethers"

// Define interfaces for your contract ABIs and types
// These would typically be generated by your Hardhat/Foundry setup
// For now, we'll use placeholder types

export interface BountyTokenContract extends ethers.Contract {
  // Example functions from BountyToken.sol
  name(): Promise<string>
  symbol(): Promise<string>
  totalSupply(): Promise<bigint>
  balanceOf(account: string): Promise<bigint>
  transfer(to: string, amount: bigint): Promise<ethers.ContractTransactionResponse>
  approve(spender: string, amount: bigint): Promise<ethers.ContractTransactionResponse>
  transferFrom(from: string, to: string, amount: bigint): Promise<ethers.ContractTransactionResponse>
  mint(to: string, amount: bigint): Promise<ethers.ContractTransactionResponse>
  burn(amount: bigint): Promise<ethers.ContractTransactionResponse>
  // UUPS specific
  proxiableUUID(): Promise<string>
  upgradeTo(newImplementation: string): Promise<ethers.ContractTransactionResponse>
  upgradeToAndCall(newImplementation: string, data: string): Promise<ethers.ContractTransactionResponse>
}

export interface AuditNFTContract extends ethers.Contract {
  // Example functions from AuditNFT.sol
  name(): Promise<string>
  symbol(): Promise<string>
  tokenURI(tokenId: bigint): Promise<string>
  ownerOf(tokenId: bigint): Promise<string>
  mintNFT(to: string, tokenId: bigint, tokenURI: string): Promise<ethers.ContractTransactionResponse>
  // UUPS specific
  proxiableUUID(): Promise<string>
  upgradeTo(newImplementation: string): Promise<ethers.ContractTransactionResponse>
  upgradeToAndCall(newImplementation: string, data: string): Promise<ethers.ContractTransactionResponse>
}

export interface AuditEngineContract extends ethers.Contract {
  // Example functions from AuditEngine.sol
  performAudit(codeHash: string): Promise<ethers.ContractTransactionResponse>
  getAuditResult(auditId: bigint): Promise<[number, string[]]> // Example: score, vulnerabilities
  // UUPS specific
  proxiableUUID(): Promise<string>
  upgradeTo(newImplementation: string): Promise<ethers.ContractTransactionResponse>
  upgradeToAndCall(newImplementation: string, data: string): Promise<ethers.ContractTransactionResponse>
}

export interface AuditRegistryContract extends ethers.Contract {
  // Example functions from AuditRegistry.sol
  registerAudit(
    auditId: bigint,
    auditor: string,
    score: number,
    vulnerabilities: string[],
  ): Promise<ethers.ContractTransactionResponse>
  getAuditDetails(auditId: bigint): Promise<[string, number, string[]]> // Example: auditor, score, vulnerabilities
  // UUPS specific
  proxiableUUID(): Promise<string>
  upgradeTo(newImplementation: string): Promise<ethers.ContractTransactionResponse>
  upgradeToAndCall(newImplementation: string, data: string): Promise<ethers.ContractTransactionResponse>
}

export interface AutoBountyManagerContract extends ethers.Contract {
  // Example functions from AutoBountyManager.sol
  createBounty(
    title: string,
    description: string,
    rewardAmount: bigint,
    rewardToken: string, // Address of BountyToken
    dueDate: bigint, // Unix timestamp
    codeHash: string,
  ): Promise<ethers.ContractTransactionResponse>
  submitBountySolution(
    bountyId: bigint,
    solutionHash: string,
    auditReportLink: string,
  ): Promise<ethers.ContractTransactionResponse>
  approveSubmission(
    bountyId: bigint,
    submissionId: bigint,
    auditorAddress: string,
    auditScore: number,
    auditNFTId: bigint,
    auditNFTURI: string,
  ): Promise<ethers.ContractTransactionResponse>
  getBounty(bountyId: bigint): Promise<any> // Placeholder for bounty struct
  getSubmission(bountyId: bigint, submissionId: bigint): Promise<any> // Placeholder for submission struct
  // UUPS specific
  proxiableUUID(): Promise<string>
  upgradeTo(newImplementation: string): Promise<ethers.ContractTransactionResponse>
  upgradeToAndCall(newImplementation: string, data: string): Promise<ethers.ContractTransactionResponse>
}

export interface CommitRevealContract extends ethers.Contract {
  // Example functions from CommitReveal.sol
  commit(commitment: string): Promise<ethers.ContractTransactionResponse>
  reveal(value: string, salt: string): Promise<ethers.ContractTransactionResponse>
  getCommitment(committer: string): Promise<string>
  // UUPS specific
  proxiableUUID(): Promise<string>
  upgradeTo(newImplementation: string): Promise<ethers.ContractTransactionResponse>
  upgradeToAndCall(newImplementation: string, data: string): Promise<ethers.ContractTransactionResponse>
}

// Map of contract names to their types for easier access
export type ContractMap = {
  BountyToken: BountyTokenContract
  AuditNFT: AuditNFTContract
  AuditEngine: AuditEngineContract
  AuditRegistry: AuditRegistryContract
  AutoBountyManager: AutoBountyManagerContract
  CommitReveal: CommitRevealContract
}
